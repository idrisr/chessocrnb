# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/96_hough.py.ipynb (unless otherwise specified).

__all__ = ['Hough']

# Cell
from .preprocess import *
from chessocr import preprocess
from fastai.data.all import *
from random import choice
URLs.chess_small

# Cell
class Hough:
    """ takes a contoured image and calculates the horizontal and vertical lines based on the hough transform """

    def __init__(self, orig):
        """ img must be binarized image of contours """
        self.orig = orig
        self.img = preprocess.color_to_contours(orig)
        assert is_bw(self.img), "Image must be binarized"
        self.a = np.array(self.img)

    @property
    def hsig(self):
        """ signal for horizontal lines"""
        return self._sig(1)

    @property
    def vsig(self):
        """ signal for vertical lines"""
        return self._sig(0)

    def _sig(self, axis):
        return self.a.sum(axis=axis)[2:-2] - self.a.sum(axis=axis)[2:-2].mean()

    @property
    def vpeaks(self):
        return fftpeaks(self.vsig)

    @property
    def hpeaks(self):
        return fftpeaks(self.hsig)

    def _repr_png_(self):
        fig = plt.figure(figsize=(12, 4))
        gs = fig.add_gridspec(1, 3)
        ax1 = fig.add_subplot(gs[0, 0])
        ax1.plot(self.hsig)
        ax1.set_title(f'horizontal: {len(self.hpeaks)}')
        ax1.vlines(self.hpeaks, 0, 1, transform=ax1.get_xaxis_transform(), colors='r')
#         ax1.set_xticks(self.hpeaks)
#         ax1.set_xticklabels(self.hpeaks)

        ax2 = fig.add_subplot(gs[0, 1])
        ax2.plot(self.vsig)
        ax2.set_title(f'vertical: {len(self.vpeaks)}')
        ax2.vlines(self.vpeaks, 0, 1, transform=ax2.get_xaxis_transform(), colors='r')
#         ax2.set_xticks(self.vpeaks)
#         ax2.set_xticklabels(self.vpeaks)

        ax3 = fig.add_subplot(gs[0, 2])
        ax3.imshow(self.orig, cmap='gray')
        ax3.hlines(self.hpeaks+4, 0, 1, transform=ax3.get_yaxis_transform(), colors='r')
        ax3.vlines(self.vpeaks+4, 0, 1, transform=ax3.get_xaxis_transform(), colors='r')

        data = print_figure(fig)
        plt.close(fig)
        return data