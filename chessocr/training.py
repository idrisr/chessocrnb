# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/06-training-data.ipynb (unless otherwise specified).

__all__ = ['boards_url', 'pieces_url', 'm', 'piece_dirs', 'Board', 'Boards', 'Piece', 'PieceSets', 'GameBoard']

# Cell
from random import randint
import random
from pathlib import Path
from PIL import Image, ImageDraw
import pandas as pd
from collections import namedtuple
from fastai.vision.all import *
import matplotlib.pyplot as plt
import numpy as np
import PIL
import chessocr
import re
from itertools import product
from IPython.core.pylabtools import print_figure

# Cell
boards_url = Path(chessocr.__file__).parent.parent/"img/boards"
pieces_url = Path(chessocr.__file__).parent.parent/"img/pieces"
m = re.compile('^[0-9]+$')
piece_dirs = sorted([_ for _ in pieces_url.iterdir() if m.match(_.name)], key=lambda i: int(i.name))

# Cell
class Board:
    """
        Represents a rendered board with particular dark and light colors.
        There are no pieces on the board.
    """
    def __init__(self, img): self.img = img
    def _repr_png_(self): return self.img.resize((100, 100))._repr_png_()

# Cell
class Boards:
    """
        Container object holding `Board` objects.
    """
    def __init__(self, url):
        self.boards = [Board(Image.open(_)) for _ in get_image_files(url)]
        self._png_data = None
    def __len__(self): return len(self.boards)
    def __getitem__(self, key): return self.boards[key]
    def __iter__(self): return self.boards.__iter__()
    def _repr_png_(self):
        if not self._png_data:
            self._png_data = self._figure_data('png')
        return self._png_data

    def _figure_data(self, format):
        rows = len(self) // 9 + 1
        fig, axs = plt.subplots(rows, 7, figsize=(14, 8))
        for i in range(len(self)):
            ax=axs.ravel()[i]
            ax.imshow(self[i].img)
            ax.set_xticks([])
            ax.set_yticks([])
            ax.set_title(f"{i}")

        data = print_figure(fig)
        plt.close(fig)
        return data

# Cell
class Piece:
    """ non data descriptor """
    def __set_name__(self, owner, name): self.name=name
    def __get__(self, obj, type=None): return Image.open(obj.dir/f'{self.name[1]}_{self.name[0]}.png')

# Cell
class PieceSets:
    def __init__(self, dirs): self.sets = [PieceSet(_) for _ in dirs]
    def __getitem__(self, key): return self.sets[key]

# Cell
class GameBoard:
    """
        Represents a combination of a Board, PieceSet, and optionally a FEN to create the position.
        If no fen is provided, the GameBoard will be in the starting position
    """
    def __init__(self, board, piece_set):
        self.board = board
        self.piece_set = piece_set