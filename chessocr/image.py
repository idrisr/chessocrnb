# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/03_image.ipynb (unless otherwise specified).

__all__ = ['drawContour', 'line_filter', 'contourFilter', 'drawContours', 'draw_hough_lines']

# Cell
import cv2
import numpy as np
import random
from fastai.data.all import *
from fastai.vision.all import *
from pathlib import Path
import PIL
import cv2
from IPython.core.debugger import set_trace
from functools import partial
from numpy import isclose

# Cell
def drawContour(image, contour, color=(255, 0, 0), thickness=4):
    for i in range(len(contour)):
        p1 = contour[i]
        p2 = contour[int((i+1) % len(contour))]
        cv2.line(image, p1.ravel(), p2.ravel(), color, thickness)

# Cell
def line_filter(lines):
    return [isclose(line[1], 0, rtol=1e-4)
            or isclose(line[1], np.pi/2, rtol=1e-4)
            for line in lines]

# Cell
def contourFilter(contour, min_ratio, img_area):
    _,_,w,h = tmp = cv2.boundingRect(contour)
    if w == 0 or h == 0:
        return -1
    ratio = min(w,h)/float(max(w,h))
    area = cv2.contourArea(contour)
    return ratio > min_ratio and area > 1/1000 * img_area

# Cell
def drawContours(img, color='red', thickness=2):
    i_con = np.zeros(img.shape[:2], dtype=np.uint8)
    contours, hierarchy = cv2.findContours(self.i_bw, cv2.RETR_CCOMP, cv2.CHAIN_APPROX_TC89_KCOS)
    f = partial(contourFilter, min_ratio=0.5)
    self.contours = list(filter(f, contours))
    red = (255, 0, 0)
    for contour in self.contours:
        drawContour(self.i_con, contour, red, thickness=2)

# Cell
def draw_hough_lines(img, lines):
    lines = lines[line_filter(lines)]
    lines = lines[lines[:, 0].argsort()[::-1]]
    for line in lines:
        rho, theta = list(line)
        if isclose(theta, 0.0):
            x1 = 0
            y1 = y2 = int(rho)
            x2 = 4000
        elif isclose(theta, np.pi/2):
            y1 = 0
            y2 = 4000
            x1 = x2 = int(rho)
        cv2.line(img, (x1, y1), (x2, y2), (0, 255, 0), 2)
    return img